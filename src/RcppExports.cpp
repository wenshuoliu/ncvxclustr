// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "ncvxclustr_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// weights_init
List weights_init(const MatrixXi& idx, const MatrixXd dist);
RcppExport SEXP ncvxclustr_weights_init(SEXP idxSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXi& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const MatrixXd >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(weights_init(idx, dist));
    return rcpp_result_gen;
END_RCPP
}
// obj_dual
double obj_dual(const double XF2, const MatrixXd& U);
RcppExport SEXP ncvxclustr_obj_dual(SEXP XF2SEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type XF2(XF2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(obj_dual(XF2, U));
    return rcpp_result_gen;
END_RCPP
}
// obj_primal
double obj_primal(const MatrixXd& Delta, const MatrixXd& V, const VectorXd& weights);
RcppExport SEXP ncvxclustr_obj_primal(SEXP DeltaSEXP, SEXP VSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(obj_primal(Delta, V, weights));
    return rcpp_result_gen;
END_RCPP
}
// proj_l2_acc
MatrixXd proj_l2_acc(const MatrixXd& Lambda, const VectorXd& radii);
RcppExport SEXP ncvxclustr_proj_l2_acc(SEXP LambdaSEXP, SEXP radiiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type radii(radiiSEXP);
    rcpp_result_gen = Rcpp::wrap(proj_l2_acc(Lambda, radii));
    return rcpp_result_gen;
END_RCPP
}
// dual_ascent
List dual_ascent(const MatrixXd& X, const SpMat& Phi, const VectorXd& weights, const MatrixXd Lambda0, int maxiter, double eps, double nv, bool trace);
RcppExport SEXP ncvxclustr_dual_ascent(SEXP XSEXP, SEXP PhiSEXP, SEXP weightsSEXP, SEXP Lambda0SEXP, SEXP maxiterSEXP, SEXP epsSEXP, SEXP nvSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const SpMat& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const MatrixXd >::type Lambda0(Lambda0SEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type nv(nvSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(dual_ascent(X, Phi, weights, Lambda0, maxiter, eps, nv, trace));
    return rcpp_result_gen;
END_RCPP
}
// dual_ascent_adapt
List dual_ascent_adapt(const MatrixXd& X, const SpMat& Phi, const VectorXd& weights, const MatrixXd Lambda0, int maxiter, double eps, double nv0, bool trace);
RcppExport SEXP ncvxclustr_dual_ascent_adapt(SEXP XSEXP, SEXP PhiSEXP, SEXP weightsSEXP, SEXP Lambda0SEXP, SEXP maxiterSEXP, SEXP epsSEXP, SEXP nv0SEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const SpMat& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const MatrixXd >::type Lambda0(Lambda0SEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type nv0(nv0SEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(dual_ascent_adapt(X, Phi, weights, Lambda0, maxiter, eps, nv0, trace));
    return rcpp_result_gen;
END_RCPP
}
// dual_ascent_fasta
List dual_ascent_fasta(const MatrixXd& X, const SpMat& Phi, const VectorXd& weights, const MatrixXd Lambda0, int maxiter, double eps, double nv0, bool trace);
RcppExport SEXP ncvxclustr_dual_ascent_fasta(SEXP XSEXP, SEXP PhiSEXP, SEXP weightsSEXP, SEXP Lambda0SEXP, SEXP maxiterSEXP, SEXP epsSEXP, SEXP nv0SEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const SpMat& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const MatrixXd >::type Lambda0(Lambda0SEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type nv0(nv0SEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(dual_ascent_fasta(X, Phi, weights, Lambda0, maxiter, eps, nv0, trace));
    return rcpp_result_gen;
END_RCPP
}
// mcp_prime
VectorXd mcp_prime(const VectorXd v_norms, const double lambda, const double gamma);
RcppExport SEXP ncvxclustr_mcp_prime(SEXP v_normsSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXd >::type v_norms(v_normsSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(mcp_prime(v_norms, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// mcp
double mcp(const VectorXd v_norms, const double lambda, const double gamma);
RcppExport SEXP ncvxclustr_mcp(SEXP v_normsSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXd >::type v_norms(v_normsSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(mcp(v_norms, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// fusion_cluster
List fusion_cluster(const MatrixXd& X, const MatrixXd& U0, const SpMat& Phi, const double lambda, const double gamma, const int maxiter_mm, const int maxiter_cvx, const double tol, const bool trace);
RcppExport SEXP ncvxclustr_fusion_cluster(SEXP XSEXP, SEXP U0SEXP, SEXP PhiSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP maxiter_mmSEXP, SEXP maxiter_cvxSEXP, SEXP tolSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type U0(U0SEXP);
    Rcpp::traits::input_parameter< const SpMat& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter_mm(maxiter_mmSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter_cvx(maxiter_cvxSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(fusion_cluster(X, U0, Phi, lambda, gamma, maxiter_mm, maxiter_cvx, tol, trace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"ncvxclustr_weights_init", (DL_FUNC) &ncvxclustr_weights_init, 2},
    {"ncvxclustr_obj_dual", (DL_FUNC) &ncvxclustr_obj_dual, 2},
    {"ncvxclustr_obj_primal", (DL_FUNC) &ncvxclustr_obj_primal, 3},
    {"ncvxclustr_proj_l2_acc", (DL_FUNC) &ncvxclustr_proj_l2_acc, 2},
    {"ncvxclustr_dual_ascent", (DL_FUNC) &ncvxclustr_dual_ascent, 8},
    {"ncvxclustr_dual_ascent_adapt", (DL_FUNC) &ncvxclustr_dual_ascent_adapt, 8},
    {"ncvxclustr_dual_ascent_fasta", (DL_FUNC) &ncvxclustr_dual_ascent_fasta, 8},
    {"ncvxclustr_mcp_prime", (DL_FUNC) &ncvxclustr_mcp_prime, 3},
    {"ncvxclustr_mcp", (DL_FUNC) &ncvxclustr_mcp, 3},
    {"ncvxclustr_fusion_cluster", (DL_FUNC) &ncvxclustr_fusion_cluster, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_ncvxclustr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
